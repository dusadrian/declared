[{"path":"/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing Guidelines","title":"Contributing Guidelines","text":"repository structured standard R package following conventions outlined Writing R extensions manual. encourage contributions community.","code":""},{"path":[]},{"path":"/CONTRIBUTING.html","id":"report-an-issue","dir":"","previous_headings":"How you can Contribute","what":"Report an issue","title":"Contributing Guidelines","text":"find issue package functionality, first search existing issues find issue already reported. issue , submit new one providing details can provide, along reproducible example.","code":""},{"path":"/CONTRIBUTING.html","id":"documenting-existing-or-new-functions","dir":"","previous_headings":"How you can Contribute","what":"Documenting existing or new functions","title":"Contributing Guidelines","text":"code package found R/, (except compiled source code, used, /src). functions thoroughly documented roxygen2 notation .R files, function documentation generated automatically. Please edit documentation files man/ NAMESPACE. Instead, construct appropriate roxygen2 documentation function files R/ . documentation generated running document() function devtools package. please consult Advanced R programming guide workflow unfamiliar . Note functions include examples documentation. Examples demontrate error, take seconds execute, require internet connection, written within \\dontrun statement.","code":""},{"path":"/CONTRIBUTING.html","id":"testing","dir":"","previous_headings":"How you can Contribute","what":"Testing","title":"Contributing Guidelines","text":"new feature bug-fix include unit-test demonstrating change. Unit tests follow testthat framework files tests/testthat. Please make sure testing suite passes issuing pull request. can done running check() devtools package, also check consistent documentation, etc. package uses AppVeyor continuous testing mechanism R ensure test suite run push Github. icon top README.md indicates whether tests currently passing. package also uses codecov.io measure test coverage. code can covered automated tests (particular, functions involving user prompts), try avoid decreasing coverage writing unit tests contributed code. Codecov.io flag PRs decrease coverage. Thank contributions!","code":""},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"/articles/a_Declared_solution.html","id":"the-declared-solution","dir":"Articles","previous_headings":"","what":"The declared solution","title":"a. Motivation for the declared package","text":"solving problem, solution forces two additional operations: converting (already) declared user missing values, employing na.rm argument. necessary, especially (extremely likely ) users may forget declared missing values actually missing values. scenario quite possible, many users previously using software like SPSS Stata nothing else done declaring missing values may realize needed. solve problem, declared package creates similar object, declared missing values stored (hence interpreted ) regular NA missing values R. print method makes obvious value -91 regular number actual missing value. importantly, type storage circumvents need convert user-defined missing values regular NA values since already stored regular NA values. average value calculated simply follows: Notice neither user_na_to_na(), employing na.rm = TRUE necessary, , despite stored NA value, value 99 equivalent empty cell. information still exists, simply ignored calculations. first glance, providing class method function seems unnecessary activating argument na.rm {.R} return correct result. Explaining importance class method requires discussion base R decision argument deactivated default. likely alert users possible problems data since default value TRUE {.R} obscure problems; mean calculated irrespective potentially problematic NA values. differentiating empty declared missing values proves valuable. declared missing values neither problematic signal potential problems data, given reason declared, already known particular value missing. genuinely problematic values empty NA values, custom class method still allows identifying values exist: Since declared values stored regular NA values, base function .na(), well related functions anyNA() etc., unaware can differentiate empty declared missing values: overcome situation, package declared complementary provides additional function account difference: missing values, empty declared, play well NA oriented, base functions na.omit() na.exclude(): made obvious excellent packages haven labelled inherently bad thing: result obtained, just via different route. Package declared created alternative design philosophy packages, fundamental difference. Instead treating existing values missing, declared package interprets missing values existing. storing additional attribute containing positions (indexes) regular NA values object, treated missing, , even , interpreted particular missing response category, specified value labels attribute.","code":"library(declared) x2 <- declared(   x = c(1:5, -91),   labels = c(\"Missing\" = -91),   na_value = -91 ) x2 #> <declared<integer>[6]> #> [1]       1       2       3       4       5 NA(-91) #> Missing values: -91 #>  #> Labels: #>  value   label #>    -91 Missing mean(x2) #> [1] 3 mean(c(x2, NA)) #> [1] NA mean(c(x2, NA), na.rm = TRUE) #> [1] 3 is.na(c(x2, NA)) #> [1] FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE is.empty(c(x2, NA)) #> [1] FALSE FALSE FALSE FALSE FALSE FALSE  TRUE na.omit(x2) #> <declared<integer>[5]> #> [1] 1 2 3 4 5 #> Missing values: -91 #>  #> Labels: #>  value   label #>    -91 Missing"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Adrian Dusa. Author, maintainer, copyright holder. Daniel Antal. Contributor.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Dusa (2022). declared: Functions Declared Missing Values. R package version 0.19.1.0001, https://github.com/dusadrian/declared.","code":"@Manual{,   title = {declared: Functions for Declared Missing Values},   author = {Adrian Dusa},   year = {2022},   note = {R package version 0.19.1.0001},   url = {https://github.com/dusadrian/declared}, }"},{"path":"/index.html","id":"declared","dir":"","previous_headings":"","what":"Functions for Declared Missing Values","title":"Functions for Declared Missing Values","text":"goal declared improve functionality imported social science microdata, particularly labelled data. excellent packages available purposes, haven labelled, fundamental design features run, situations, user’s expectations. lot treatment declared missing values, instrumental social sciences. aim declared offer alternative class, declared(), whilst ensuring much compatibility possible packages popular packages.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Functions for Declared Missing Values","text":"can install development version declared using command:","code":"install.packages(\"declared\", repos = \"dusadrian.r-universe.dev\")"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Functions for Declared Missing Values","text":"Instead using labelled::labelled() class inherited version haven, declared package offers similar class behaves expected–interprets certain “missing” values NA codes existing, declared missing values.","code":"library(haven) x1 <- labelled_spss(   x = c(1:5, -91),   labels = c(\"Missing\" = -91),   na_value = -91 )  print(x1) #> <labelled_spss<double>[6]> #> [1]   1   2   3   4   5 -91 #> Missing values: -91 #>  #> Labels: #>  value   label #>    -91 Missing  mean(x1) #> [1] -12.66667 library(declared) x2 <- declared(   x = c(1:5, -91),   labels = c(\"Missing\" = -91),   na_value = -91 )  print(x2) #> <declared<integer>[6]> #> [1]       1       2       3       4       5 NA(-91) #> Missing values: -91 #>  #> Labels: #>  value   label #>    -91 Missing  mean(x2) #> [1] 3"},{"path":"/reference/as.haven.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce to haven / labelled objects — as.haven","title":"Coerce to haven / labelled objects — as.haven","text":"Convert declared labelled objects haven labelled objects","code":""},{"path":"/reference/as.haven.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce to haven / labelled objects — as.haven","text":"","code":"as.haven(x, ...)"},{"path":"/reference/as.haven.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce to haven / labelled objects — as.haven","text":"x declared labelled vector ... arguments used various methods","code":""},{"path":"/reference/as.haven.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce to haven / labelled objects — as.haven","text":"labelled vector class \"haven_labelled_spss\".","code":""},{"path":"/reference/as.haven.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Coerce to haven / labelled objects — as.haven","text":"function reverses process .declared(), making round trip declared haven_labelled_spss classes.","code":""},{"path":"/reference/as.haven.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce to haven / labelled objects — as.haven","text":"","code":"x <- declared(     c(1:5, -1),     labels = c(Good = 1, Bad = 5, DK = -1),     na_values = -1 )  x #> <declared<integer>[6]> #> [1]      1      2      3      4      5 NA(-1) #> Missing values: -1 #>  #> Labels: #>  value label #>      1  Good #>      5   Bad #>     -1    DK  as.haven(x) #> <labelled_spss<double>[6]> #> [1]  1  2  3  4  5 -1 #> Missing values: -1 #>  #> Labels: #>  value label #>      1  Good #>      5   Bad #>     -1    DK"},{"path":"/reference/declared.html","id":null,"dir":"Reference","previous_headings":"","what":"Labelled vectors with declared missing values — as.declared","title":"Labelled vectors with declared missing values — as.declared","text":"labelled vectors mainly used analyse social science data, missing values declaration important step analysis.","code":""},{"path":"/reference/declared.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Labelled vectors with declared missing values — as.declared","text":"","code":"as.declared(x, ...)  declared(   x,   labels = NULL,   na_values = NULL,   na_range = NULL,   label = NULL,   measurement = NULL,   llevels = FALSE,   ... )  is.declared(x)"},{"path":"/reference/declared.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Labelled vectors with declared missing values — as.declared","text":"x numeric vector label, declared labelled vector (undeclare) ... arguments used various methods labels named vector NULL. vector type x. Unlike factors, labels need exhaustive: fraction values might labelled na_values vector values also considered missing na_range numeric vector length two giving (inclusive) extents range. Use -Inf Inf want range open ended label short, human-readable description vector measurement Optional, user specified measurement level llevels Logical, x factor use levels labels","code":""},{"path":"/reference/declared.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Labelled vectors with declared missing values — as.declared","text":"labelled vector class \"declared\". .declared() returns logical value.","code":""},{"path":"/reference/declared.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Labelled vectors with declared missing values — as.declared","text":"declared objects similar haven_labelled_spss objects package haven. exactly arguments, features fundamental difference treatment (declared) missing values. package haven, existing values treated missing. contrast, package declared NA values treated existing values. difference fundamental points inconsistency package haven: existing values can identified missing using function .na(), fact present vector packages (importantly base ones) know values treated missing. Consequently, existing values interpreted missing package haven. Statistical procedures use values valid values. Package declared approaches problem exactly opposite way: instead treating existing values missing, treats (certain) NA values existing. storing attribute containing indices NA values treated declared missing values, refreshes attribute time declared object changed. trade important implications subsetting datasets: declared variables get attribute refreshed, consumes time depending number variables data. generic function .declared() attempts coerce compatible types objects, namely haven_labelled factors. Dedicated class methods can written type object, users free write . end declared object, additional metadata needed value labels, values treated missing etc. measurement level optional , moment, purely aesthetic. might however useful (automatically) determine declared object suitable certain statistical analysis, instance regression requires quantitative variables, declared objects certainly categorical despite using numbers denote categories. distinguishes \"categorial\" \"quantitative\" types variables, additionally recognizes \"nominal\" \"ordinal\" categorical, similarly recognizes \"interval\", \"ratio\", \"discrete\" \"continuous\" quantitative.","code":""},{"path":"/reference/declared.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Labelled vectors with declared missing values — as.declared","text":"","code":"x <- declared(     c(1:5, -1),     labels = c(Good = 1, Bad = 5, DK = -1),     na_values = -1 )  x #> <declared<integer>[6]> #> [1]      1      2      3      4      5 NA(-1) #> Missing values: -1 #>  #> Labels: #>  value label #>      1  Good #>      5   Bad #>     -1    DK  is.na(x) #> [1] FALSE FALSE FALSE FALSE FALSE  TRUE  x > 0 #> [1]  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  x == -1 #> [1] FALSE FALSE FALSE FALSE FALSE  TRUE  # Values are actually placeholder for categories, # so labels work as if they were factors: x == \"DK\" #> [1] FALSE FALSE FALSE FALSE FALSE  TRUE   # when newly added values are already declared as missing, # they are automatically coerced c(x, 2, -1) #> <declared<integer>[8]> #> [1]      1      2      3      4      5 NA(-1)      2 NA(-1) #> Missing values: -1 #>  #> Labels: #>  value label #>     -1    DK #>      1  Good #>      5   Bad  # switch NAs with their original values undeclare(x) #> <declared<integer>[6]> #> [1]  1  2  3  4  5 -1 #>  #> Labels: #>  value label #>      1  Good #>      5   Bad #>     -1    DK  as.character(x) #> [1] \"Good\" \"2\"    \"3\"    \"4\"    \"Bad\"  NA      # Returning values instead of categories as.character(x, values = TRUE) #> [1] \"1\" \"2\" \"3\" \"4\" \"5\" NA"},{"path":"/reference/declared_internal.html","id":null,"dir":"Reference","previous_headings":"","what":"declared internal functions — declared_internal","title":"declared internal functions — declared_internal","text":"Functions used internally, developers contributors.","code":""},{"path":"/reference/declared_internal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"declared internal functions — declared_internal","text":"","code":"format_declared(x, digits = getOption(\"digits\"))  order_declared(   x,   na.last = NA,   decreasing = FALSE,   method = c(\"auto\", \"shell\", \"radix\"),   empty.last = na.last,   ... )  value_labels(...)  variable_label(...)  names_values(x, drop_na = FALSE)  makeTag_(...)  hasTag_(x, tag = NULL)  getTag_(x)"},{"path":"/reference/declared_package.html","id":null,"dir":"Reference","previous_headings":"","what":"Functions for Declared Missing Values — declared_package","title":"Functions for Declared Missing Values — declared_package","text":"set functions declare labels missing values, coupled associated functions create (weighted) tables frequencies various summary measures. base functions rewritten make use specific information missing values, importantly distinguish empty declared missing values. Many functions similar functionality corresponding ones packages \"haven\" \"labelled\". aim ensure much compatibility possible packages, offering alternative objects class \"declared\".","code":""},{"path":[]},{"path":"/reference/declared_package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Functions for Declared Missing Values — declared_package","text":"Adrian Dusa Maintainer: Adrian Dusa (dusa.adrian@unibuc.ro)","code":""},{"path":"/reference/drop_undeclare.html","id":null,"dir":"Reference","previous_headings":"","what":"Drop information / undeclare labelled objects — drop_undeclare","title":"Drop information / undeclare labelled objects — drop_undeclare","text":"function obtain version object information declared missing values, dropped","code":""},{"path":"/reference/drop_undeclare.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Drop information / undeclare labelled objects — drop_undeclare","text":"","code":"undeclare(x, drop = FALSE, ...)  drop_na(x, drop_labels = TRUE)"},{"path":"/reference/drop_undeclare.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Drop information / undeclare labelled objects — drop_undeclare","text":"x labelled object declared missing values drop Logical, drop attributes ... internal arguments drop_labels Logical, drop labels declared missing values","code":""},{"path":"/reference/drop_undeclare.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Drop information / undeclare labelled objects — drop_undeclare","text":"declared labelled object.","code":""},{"path":"/reference/drop_undeclare.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Drop information / undeclare labelled objects — drop_undeclare","text":"#' function undeclare() replaces NA entries original numeric values, drops attributes related missing values: na_values, na_range na_index, preserves labels referring missing values. result can regular vector (dropping attributes, including class \"declared\") activating argument drop. Function drop_na() transforms declared missing values regular empty NAs, labels referring missing values deleted default. Function drop() deletes attributes.","code":""},{"path":[]},{"path":"/reference/drop_undeclare.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Drop information / undeclare labelled objects — drop_undeclare","text":"","code":"x <- declared(     c(-2, 1:5, -1),     labels = c(\"Good\" = 1, \"Bad\" = 5, \"DK\" = -1),     na_values = c(-1, -2),     label = \"Test variable\" )  x #> <declared<integer>[7]> Test variable #> [1] NA(-2)      1      2      3      4      5 NA(-1) #> Missing values: -1, -2 #>  #> Labels: #>  value label #>      1  Good #>      5   Bad #>     -1    DK  undeclare(x) #> <declared<integer>[7]> Test variable #> [1] -2  1  2  3  4  5 -1 #>  #> Labels: #>  value label #>      1  Good #>      5   Bad #>     -1    DK  drop_na(x) #> <declared<integer>[7]> Test variable #> [1] NA  1  2  3  4  5 NA #>  #> Labels: #>  value label #>      1  Good #>      5   Bad  drop(x) #> [1] NA  1  2  3  4  5 NA  undeclare(x, drop = TRUE) #> [1] -2  1  2  3  4  5 -1  # similar to: drop(undeclare(x)) #> [1] -2  1  2  3  4  5 -1"},{"path":"/reference/is.empty.html","id":null,"dir":"Reference","previous_headings":"","what":"Test the presence of empty (undeclared) missing values — is.empty","title":"Test the presence of empty (undeclared) missing values — is.empty","text":"Functions indicate elements empty NA missing values, contrast declared missing values.","code":""},{"path":"/reference/is.empty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test the presence of empty (undeclared) missing values — is.empty","text":"","code":"is.empty(x)"},{"path":"/reference/is.empty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test the presence of empty (undeclared) missing values — is.empty","text":"x vector","code":""},{"path":"/reference/is.empty.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test the presence of empty (undeclared) missing values — is.empty","text":"logical vector.","code":""},{"path":"/reference/is.empty.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test the presence of empty (undeclared) missing values — is.empty","text":"missing values, declared undeclared, stored regular NA values, therefore base function is_na() differentiate . functions specifically adapted objects class \"declared\", return truth value elements completely missing reason.","code":""},{"path":"/reference/is.empty.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test the presence of empty (undeclared) missing values — is.empty","text":"","code":"x <- declared(     c(1:2, -91),     labels = c(Good = 1, Bad = 2, Missing = -91),     na_values = -91 )  x #> <declared<integer>[3]> #> [1]       1       2 NA(-91) #> Missing values: -91 #>  #> Labels: #>  value   label #>      1    Good #>      2     Bad #>    -91 Missing  is.empty(x) # FALSE FALSE FALSE #> [1] FALSE FALSE FALSE  x <- c(x, NA)  is.empty(x) # FALSE FALSE FALSE  TRUE #> [1] FALSE FALSE FALSE  TRUE"},{"path":"/reference/labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Get / Declare value labels — labels","title":"Get / Declare value labels — labels","text":"Functions extract information declared variable / value labels, declare values present data.","code":""},{"path":"/reference/labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get / Declare value labels — labels","text":"","code":"label(x)  label(x, ...) <- value  labels(x) <- value"},{"path":"/reference/labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get / Declare value labels — labels","text":"x vector values declared missing (labels) numeric vector length two giving (inclusive) extents range missing values (label). ... arguments, internal use. value variable label, list (named) variable labels","code":""},{"path":"/reference/labels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get / Declare value labels — labels","text":"labels() return named vector. label() return single character string.","code":""},{"path":"/reference/labels.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get / Declare value labels — labels","text":"function labels() adaptation base function objects class declared. addition regular arguments, additional logical one called prefixed, retrieve value labels prefixed values.","code":""},{"path":[]},{"path":"/reference/labels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get / Declare value labels — labels","text":"","code":"x <- declared(     c(-2, 1:5, -1),     labels = c(\"Good\" = 1, \"Bad\" = 5, \"DK\" = -1),     na_values = c(-1, -2),     label = \"Test variable\" ) x #> <declared<integer>[7]> Test variable #> [1] NA(-2)      1      2      3      4      5 NA(-1) #> Missing values: -1, -2 #>  #> Labels: #>  value label #>      1  Good #>      5   Bad #>     -1    DK  labels(x) #> Good  Bad   DK  #>    1    5   -1   labels(x, prefixed = TRUE) #> [1] Good  [5] Bad  [-1] DK  #>        1        5       -1   labels(x) <- c(\"Good\" = 1, \"Bad\" = 5, \"DK\" = -1, \"Not applicable\" = -2)  label(x) #> [1] \"Test variable\"  label(x) <- \"This is a proper label\"  x #> <declared<integer>[7]> This is a proper label #> [1] NA(-2)      1      2      3      4      5 NA(-1) #> Missing values: -1, -2 #>  #> Labels: #>  value          label #>      1           Good #>      5            Bad #>     -1             DK #>     -2 Not applicable"},{"path":"/reference/measurement.html","id":null,"dir":"Reference","previous_headings":"","what":"Get / Set measurement levels for declared objects — measurement","title":"Get / Set measurement levels for declared objects — measurement","text":"Functions extract information measurement levels variable (already present), specify measurement levels.","code":""},{"path":"/reference/measurement.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get / Set measurement levels for declared objects — measurement","text":"","code":"measurement(x)  measurement(x) <- value"},{"path":"/reference/measurement.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get / Set measurement levels for declared objects — measurement","text":"x declared vector. value single character string measurement levels, separated commas.","code":""},{"path":"/reference/measurement.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get / Set measurement levels for declared objects — measurement","text":"character vector.","code":""},{"path":"/reference/measurement.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get / Set measurement levels for declared objects — measurement","text":"function creates attribute called \"measurement\" declared object, optional feature, point purely aesthetic reasons. attribute might become useful future (automatically) determine declared object suitable certain statistical analysis, instance regression requires quantitative variables, declared objects certainly categorical despite using numbers denote categories. distinguishes \"categorical\" \"quantitative\" types variables, additionally recognizes \"nominal\" \"ordinal\" categorical, similarly recognizes \"interval\", \"ratio\", \"discrete\" \"continuous\" quantitative. words \"qualitative\" treated synonym \"categorical\", words \"metric\" \"numeric\" treated synonyms \"quantitative\", respectively.","code":""},{"path":[]},{"path":"/reference/measurement.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get / Set measurement levels for declared objects — measurement","text":"","code":"x <- declared(     c(-2, 1:5, -1),     labels = c(Good = 1, Bad = 5, DK = -1),     na_values = c(-1, -2),     label = \"Test variable\" )  x #> <declared<integer>[7]> Test variable #> [1] NA(-2)      1      2      3      4      5 NA(-1) #> Missing values: -1, -2 #>  #> Labels: #>  value label #>      1  Good #>      5   Bad #>     -1    DK  measurement(x) #> [1] \"Unspecified, but likely categorical\"  # automatically recognized as categorical measurement(x) <- \"ordinal\"  measurement(x) #> [1] \"categorical, ordinal\"  # the same with measurement(x) <- \"categorical, ordinal\"  set.seed(1890) x <- declared(     sample(c(18:90, -91), 20, replace = TRUE),     labels = c(\"No answer\" = -91),     na_values = -91,     label = \"Respondent's age\" )  # automatically recognized as quantitative measurement(x) <- \"discrete\"  measurement(x) #> [1] \"quantitative, discrete\"  # the same with measurement(x) <- \"metric, discrete\""},{"path":"/reference/missing_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Get / Declare missing values — missing_range","title":"Get / Declare missing values — missing_range","text":"Functions extract information declared missing values, declare values present data.","code":""},{"path":"/reference/missing_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get / Declare missing values — missing_range","text":"","code":"missing_range(x)  missing_range(x) <- value  missing_values(x)  missing_values(x) <- value"},{"path":"/reference/missing_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get / Declare missing values — missing_range","text":"x vector. value vector values declared missing (missing_values) numeric vector length two giving (inclusive) extents range missing values (missing_range).","code":""},{"path":"/reference/missing_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get / Declare missing values — missing_range","text":"missing_values() return vector one values. missing_range() return numeric vector length 2.","code":""},{"path":"/reference/missing_values.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get / Declare missing values — missing_range","text":"","code":"x <- declared(c(-2, 1:5, -1),     labels = c(Good = 1, Bad = 5, DK = -1, NotApplicable = -2),     na_values = c(-1, -2) ) x #> <declared<integer>[7]> #> [1] NA(-2)      1      2      3      4      5 NA(-1) #> Missing values: -1, -2 #>  #> Labels: #>  value         label #>      1          Good #>      5           Bad #>     -1            DK #>     -2 NotApplicable  missing_values(x) #> [1] -1 -2  missing_range(x) <- c(-10, -7)  missing_range(x) #> [1] -10  -7"},{"path":"/reference/weighted.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute weighted summaries for declared objects — w_mean","title":"Compute weighted summaries for declared objects — w_mean","text":"Functions compute weighted tables summaries, based vector frequency weights. reimplementations various existing functions, adapted objects class \"declared\" (see Details )","code":""},{"path":"/reference/weighted.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute weighted summaries for declared objects — w_mean","text":"","code":"w_mean(x, wt = NULL, trim = 0, na.rm = TRUE)  w_median(x, wt = NULL, na.rm = TRUE, ...)  w_mode(x, wt = NULL)  w_quantile(x, wt = NULL, probs = seq(0, 1, 0.25), na.rm = TRUE, ...)  w_sd(x, wt = NULL, method = NULL, na.rm = TRUE)  w_standardize(x, wt = NULL, na.rm = TRUE)  w_summary(x, wt = NULL, ...)  w_table(   x,   y = NULL,   wt = NULL,   values = FALSE,   valid = TRUE,   observed = TRUE,   margin = NULL )  w_var(x, wt = NULL, method = NULL, na.rm = TRUE)"},{"path":"/reference/weighted.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute weighted summaries for declared objects — w_mean","text":"x numeric vector summaries, declared / factor frequency tables wt numeric vector frequency weights trim fraction (0 0.5) observations trimmed end x mean computed. Values trim outside range taken nearest endpoint. na.rm Logical, empty missing values removed? ... arguments passed methods. probs Numeric vector probabilities values [0,1] method Character, specifying result scaled, see 'Details' . y optional variable, create crosstabs; must length x values Logical, print values table rows valid Logical, print percent distribution non-missing values, missing values present observed Logical, print observed categories margin Numeric, indicating margin calculate crosstab proportions: 0 total, 1 row totals 2 column totals","code":""},{"path":"/reference/weighted.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute weighted summaries for declared objects — w_mean","text":"vector (weighted) values.","code":""},{"path":"/reference/weighted.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute weighted summaries for declared objects — w_mean","text":"Weighted summaries frequency table usually performed categorical variable, displaying frequencies respective categories. Note general variables containing text necessarily factors, despite small number characters. general table frequencies, using base function table(), ignores defined missing values (stored NAs). reimplementation function w_table() takes care detail, presents frequencies separately defined missing values. Similar reimplementations functions underlying objective. also possible perform frequency table numerical variables, number values limited (arbitrary debatable upper limit 15 used). example variable can number children, value can interpreted class, containing single value (instance 0 meaning category people children). Objects class declared pure categorical variables (R factors) nevertheless interpreted similarly factors, allow producing frequency tables. Given high similarity package haven, objects class haven_labelled_spss automatically coerced objects class declared treated accordingly. argument values makes sense input family class declared, otherwise regular (base R) factors values just sequence numbers. later introduced argument observed useful situations variable large number potential values, smaller subset actually observed ones. example, variable “Occupation” hundreds possible values ISCO08 codelist, might actually observed. activated, argument restricts printed frequency table subset observed values . argument method can one \"unbiased\" \"ML\". set \"unbiased\", result unbiased estimate using Bessel's correction. set \"ML\", result maximum likelihood estimate Gaussian distribution. argument wt refers frequency weights. Users aware differences frequency weights, analytic weights, probability weights, design weights, post-stratification weights etc. purposes inferential testing, Thomas Lumley's package survey employed. frequency weights provided, result identical corresponding base functions. function w_quantile() extensively borrowed ideas packages stats Hmisc, ensure constant interpolation produce quantiles weights provided weights equal 1. arguments can passed stats function quantile() via three dots ... argument, extensive explanation found corresponding stats function's help page. functions, argument na.rm refers empty missing values default set TRUE. declared missing values automatically eliminated summary statistics, even argument deactivated. function w_mode() returns weighted mode variable. Unlike functions prefix w_ signals weighted version base function name, nothing base function mode() refers storage mode / type R object.","code":""},{"path":"/reference/weighted.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compute weighted summaries for declared objects — w_mean","text":"Adrian Dusa","code":""},{"path":"/reference/weighted.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute weighted summaries for declared objects — w_mean","text":"","code":"set.seed(215)  # a pure categorical variable x <- factor(sample(letters[1:5], 215, replace = TRUE)) w_table(x) #>  #>   fre    rel   per   cpd #>   ---------------------- #> a  37  0.172  17.2  17.2  #> b  45  0.209  20.9  38.1  #> c  43  0.200  20.0  58.1  #> d  44  0.205  20.5  78.6  #> e  46  0.214  21.4 100.0  #>   ---------------------- #>   215  1.000 100.0 #>    # simulate number of children x <- sample(0:4, 215, replace = TRUE) w_table(x) #>  #>   fre    rel   per   cpd #>   ---------------------- #> 0  36  0.167  16.7  16.7  #> 1  41  0.191  19.1  35.8  #> 2  49  0.228  22.8  58.6  #> 3  45  0.209  20.9  79.5  #> 4  44  0.205  20.5 100.0  #>   ---------------------- #>   215  1.000 100.0 #>   # simulate a Likert type response scale from 1 to 7 values <- sample(c(1:7, -91), 215, replace = TRUE) x <- declared(values, labels = c(\"Good\" = 1, \"Bad\" = 7)) w_table(x) #>  #>      fre    rel   per   cpd #>      ---------------------- #>  -91  16  0.074   7.4   7.4  #> Good  25  0.116  11.6  19.1  #>    2  25  0.116  11.6  30.7  #>    3  32  0.149  14.9  45.6  #>    4  37  0.172  17.2  62.8  #>    5  24  0.112  11.2  74.0  #>    6  21  0.098   9.8  83.7  #>  Bad  35  0.163  16.3 100.0  #>      ---------------------- #>      215  1.000 100.0 #>    # Defining missing values missing_values(x) <- -91 w_table(x) #>  #>      fre    rel   per   vld   cpd #>      ---------------------------- #> Good  25  0.116  11.6  12.6  12.6  #>    2  25  0.116  11.6  12.6  25.1  #>    3  32  0.149  14.9  16.1  41.2  #>    4  37  0.172  17.2  18.6  59.8  #>    5  24  0.112  11.2  12.1  71.9  #>    6  21  0.098   9.8  10.6  82.4  #>  Bad  35  0.163  16.3  17.6 100.0  #> ---- #>  -91  16  0.074   7.4  #>      ---------------------------- #>      215  1.000 100.0 #>    # Defined missing values with labels values <- sample(c(1:7, -91, NA), 215, replace = TRUE) x <- declared(     values,     labels = c(\"Good\" = 1, \"Bad\" = 7, \"Don't know\" = -91),     na_values = -91 )  w_table(x) #>  #>            fre    rel   per   vld   cpd #>            ---------------------------- #>       Good  20  0.093   9.3  12.0  12.0  #>          2  33  0.153  15.3  19.9  31.9  #>          3  27  0.126  12.6  16.3  48.2  #>          4  27  0.126  12.6  16.3  64.5  #>          5  22  0.102  10.2  13.3  77.7  #>          6  22  0.102  10.2  13.3  91.0  #>        Bad  15  0.070   7.0   9.0 100.0  #>      ----- #> Don't know  24  0.112  11.2  #>         NA  25  0.116  11.6  #>            ---------------------------- #>            215  1.000 100.0 #>   # Including the values in the table of frequencies w_table(x, values = TRUE) #>  #>                fre    rel   per   vld   cpd #>                ---------------------------- #>       Good   1  20  0.093   9.3  12.0  12.0  #>          2   2  33  0.153  15.3  19.9  31.9  #>          3   3  27  0.126  12.6  16.3  48.2  #>          4   4  27  0.126  12.6  16.3  64.5  #>          5   5  22  0.102  10.2  13.3  77.7  #>          6   6  22  0.102  10.2  13.3  91.0  #>        Bad   7  15  0.070   7.0   9.0 100.0  #>          ----- #> Don't know -91  24  0.112  11.2  #>             NA  25  0.116  11.6  #>                ---------------------------- #>                215  1.000 100.0 #>    # An example involving multiple variables DF <- data.frame(     Area = declared(         sample(1:2, 215, replace = TRUE, prob = c(0.45, 0.55)),         labels = c(Rural = 1, Urban = 2)     ),     Gender = declared(         sample(1:2, 215, replace = TRUE, prob = c(0.55, 0.45)),         labels = c(Males = 1, Females = 2)     ),     Age = sample(18:90, 215, replace = TRUE),     Children = sample(0:5, 215, replace = TRUE) )  w_table(DF$Gender) #>  #>         fre    rel   per   cpd #>         ---------------------- #>   Males 119  0.553  55.3  55.3  #> Females  96  0.447  44.7 100.0  #>         ---------------------- #>         215  1.000 100.0 #>   w_sd(DF$Age) #> [1] 20.19372   # Weighting: observed proportions op <- proportions(with(DF, table(Gender, Area)))  # Theoretical proportions: 53% Rural, and 50% Females tp <- rep(c(0.53, 0.47), each = 2) * rep(c(0.498, 0.502), 2) / op  DF$fweight <- tp[match(10 * DF$Area + DF$Gender, c(11, 12, 21, 22))]  with(DF, w_table(Gender, wt = fweight)) #>  #>         fre    rel   per   cpd #>         ---------------------- #>   Males 107  0.498  49.8  49.8  #> Females 108  0.502  50.2 100.0  #>         ---------------------- #>         215  1.000 100.0 #>   with(DF, w_mean(Age, wt = fweight)) #> [1] 55.12584  with(DF, w_quantile(Age, wt = fweight)) #>  #>   0%   25%  50%  75% 100% #>   18   38   55   71   90  #>"},{"path":"/news/index.html","id":"version-018","dir":"Changelog","previous_headings":"","what":"Version 0.18","title":"Version 0.18","text":"CRAN release: 2022-09-29","code":"* Improved method for `rbind()` data frames, taking care of declared variables * Function value_labels() has been replaced with the generic base function   `labels()`, and the function `variable_label()` has been replaced with the   function `label()` * Changed default for `as.factor()`, with values and (where available) levels   (thanks to Daniel Antal for the report) * New generic function `drop_na()` to drop information about the declared   missing values"},{"path":"/news/index.html","id":"version-017","dir":"Changelog","previous_headings":"","what":"Version 0.17","title":"Version 0.17","text":"CRAN release: 2022-06-20","code":"* Correctly determine the object mode, function of both value labels and   input values (especially when all input values are empty NA values) * New argument \"`measurement`\" in function `declared()` * New function `measurement()`, to query and allocate measurement levels"},{"path":"/news/index.html","id":"version-016","dir":"Changelog","previous_headings":"","what":"Version 0.16","title":"Version 0.16","text":"CRAN release: 2022-05-12","code":"* New logical argument \"`values`\" in the S3 method for `as.character()` * Removed aliases `as_declared()` and `as_haven()` from the namespace * Fixed `as.haven()` which should return double objects"},{"path":"/news/index.html","id":"version-015","dir":"Changelog","previous_headings":"","what":"Version 0.15","title":"Version 0.15","text":"CRAN release: 2022-04-13","code":"* Class method for many / most primitive functions, with declared objects * Bug fix in `w_table()` affecting zero frequency categories * Dropped alias `frtable()` from function `w_table()` * New function `is.empty()`, testing the presence of undeclared missing values * Main function `declare()` is now generic, allowing flexibility to create   custom methods for any other classes of objects * Removed dependency on package admisc, by incorporating the necessary   functionality as internal functions"},{"path":"/news/index.html","id":"version-013","dir":"Changelog","previous_headings":"","what":"Version 0.13","title":"Version 0.13","text":"CRAN release: 2022-04-03","code":"* New functions `w_mode()` and `w_standardize()` * Fixed `w_summary()`, summaries should not be rounded by default * Fixed `w_mean()` to weight negative values Thanks to an anonymous reviewer for reporting and suggesting the following: * New argument \"`drop`\" in function `undeclare()` * Bug fix in the class methods for `head()` and `tail()` * Function declared now duly recognizes input factors * Extended `as.factor()` for objects of class \"`declared`\" * Added proper class methods for primitive arithmetic operations * New functions `as.declared()`, `is.declared()` * Added explanatory documentation (for instance in the DESCRIPTION file) to   explain the reasons for reimplementing some of the base functions"},{"path":"/news/index.html","id":"version-012","dir":"Changelog","previous_headings":"","what":"Version 0.12","title":"Version 0.12","text":"CRAN release: 2022-03-14","code":"* New function `w_summary()` * Functions `w_table()` and `w_quantile()` now properly deal with missing weights * New argument \"`trim`\" in function `w_mean()`"},{"path":"/news/index.html","id":"version-011","dir":"Changelog","previous_headings":"","what":"Version 0.11","title":"Version 0.11","text":"CRAN release: 2022-03-03","code":"* Fixed `w_table()`, an internal object was inadvertently returned * Improved printing of crosstables"},{"path":"/news/index.html","id":"version-010","dir":"Changelog","previous_headings":"","what":"Version 0.10","title":"Version 0.10","text":"CRAN release: 2022-02-22","code":"* New functions `w_mean()`, `w_var()` and `w_sd()`, `w_quantile()` and   `w_median()`, to  obtain weighted versions of mean, variance and standard   deviation, quantiles and median, respectively, adapted to declared objects * Fixed a bug in `as.haven.declared()`, when all values are (declared)   missing and labels are not numeric * Argument \"`weight`\" changed to \"`wt`\" in `w_table()` * New arguments in function `w_table()`: \"`observed`\" to only print observed   values, and \"`margin`\" to calculate proportions in crosstabs * Function `w_table()` now accepts a second argument \"`y`\" to create crosstabs * Function `frtable()` renamed to `w_table()` standing for weighted table"},{"path":"/news/index.html","id":"version-09","dir":"Changelog","previous_headings":"","what":"Version 0.9","title":"Version 0.9","text":"CRAN release: 2022-02-11","code":"* New argument \"`weight`\" in function `frtable()`, allowing to weight not   only valid but also missing values * More robust function `frtable()` in treating declared values with   overlapping labels (e.g. hierarchical ISCO codes and categories) * Fixed a bug in `declared()` when all values are completely missing"},{"path":"/news/index.html","id":"version-08","dir":"Changelog","previous_headings":"","what":"Version 0.8","title":"Version 0.8","text":"CRAN release: 2022-01-11","code":"* Improved treatment of equality and non-equality, now accepting labels as   well as values * Reverted functionality to not dropping the attributes in arithmetic   operations, this is now left to the users' preference"},{"path":"/news/index.html","id":"version-07","dir":"Changelog","previous_headings":"","what":"Version 0.7","title":"Version 0.7","text":"CRAN release: 2021-09-02","code":"* Bug fix saving declared data frames as .csv files * `as.declared()` now retains the \"format.spss\" attribute, if existing"},{"path":"/news/index.html","id":"version-06","dir":"Changelog","previous_headings":"","what":"Version 0.6","title":"Version 0.6","text":"CRAN release: 2021-08-18","code":"* Improved treatment of arithmetic operations, attributes are no longer   propagated (thanks to Randall Pruim for the suggestion) * Modified as.haven() for objects of class \"`declared`\", to avoid a bug in   package ReadStat that prevents exporting missing values to SPSS for   integer variables"},{"path":"/news/index.html","id":"version-05","dir":"Changelog","previous_headings":"","what":"Version 0.5","title":"Version 0.5","text":"CRAN release: 2021-06-16","code":"* Initial version"}]
